@use "sass:math";
@use "sass:list";
@use "sass:map";

//################################################################################################################
//
//   GENERAL FUNCTIONS
//
//################################################################################################################

//===============================================================================================================
// General theme functions
//===============================================================================================================

//------------------------------------------------------------------------------------------
// Return image path
//------------------------------------------------------------------------------------------

@function img-path($image) {
  @return $imgs_path + $image;
}

//------------------------------------------------------------------------------------------
// Use Dynamic CSS variables
//------------------------------------------------------------------------------------------

@function v($propertyName: "", $argsFallbacks...) {
  $fallbacksNb: length($argsFallbacks);

  @if $fallbacksNb < 1 {
    @return var(--#{$propertyName});
  }
  $fallbacks: nth($argsFallbacks, $fallbacksNb);
  @if $fallbacksNb > 1 {
    @for $index from $fallbacksNb - 1 through 1 {
      $fallbacks: var(--#{nth($argsFallbacks, $index)}, #{$fallbacks});
    }
  }
  @return var(--#{$propertyName}, $fallbacks);
}

//===============================================================================================================
// General utils functions
//===============================================================================================================

//------------------------------------------------------------------------------------------
// Strip units (px, %, REM, EM...)
//------------------------------------------------------------------------------------------

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

//------------------------------------------------------------------------------------------
// String Replace
//------------------------------------------------------------------------------------------

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

//------------------------------------------------------------------------------------------
// String split
//------------------------------------------------------------------------------------------

@function str-split($string, $separator) {
  // empty array/list
  $split-arr: ();
  // first index of separator in string
  $index: str-index($string, $separator);
  // loop through string
  @while $index != null {
    // get the substring from the first character to the separator
    $item: str-slice($string, 1, $index - 1);
    // push item to array
    $split-arr: append($split-arr, $item);
    // remove item and separator from string
    $string: str-slice($string, $index + 1);
    // find new index of separator
    $index: str-index($string, $separator);
  }
  // add the remaining string to list (the last item)
  $split-arr: append($split-arr, $string);

  @return $split-arr;
}

//------------------------------------------------------------------------------------------
// To number
//------------------------------------------------------------------------------------------

@function to-number($value) {
  @if type-of($value) == "number" {
    @return $value;
  } @else if type-of($value) != "string" {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == "-";
  $numbers: (
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == ".") {
      @if $character == "." {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
  }

  @return if($minus, -$result, $result);
}

//------------------------------------------------------------------------------------------
// To unit
//------------------------------------------------------------------------------------------

@function to-unit($value) {
  @if type-of($value) != "string" {
    @error 'Value for `to-unit` should be a string.';
  }

  $units: (
    "px": 1px,
    "cm": 1cm,
    "mm": 1mm,
    "%": 1%,
    "ch": 1ch,
    "pc": 1pc,
    "in": 1in,
    "em": 1em,
    "rem": 1rem,
    "pt": 1pt,
    "ex": 1ex,
    "vw": 1vw,
    "vh": 1vh,
    "vmin": 1vmin,
    "vmax": 1vmax,
  );
  $parsed-unit: false;

  @each $unit in $units {
    @if (str-index($value, nth($unit, 1))) {
      $parsed-unit: nth($unit, 2);
    }
  }

  @if (not $parsed-unit) {
    @error 'Invalid unit `#{$value}`.';
  }

  @return $parsed-unit;
}

//===============================================================================================================
// Mathematical functions
//===============================================================================================================

//------------------------------------------------------------------------------------------
// Square Root
//------------------------------------------------------------------------------------------

@function sqrt($r) {
  $x0: 1;
  $x1: $x0;

  @for $i from 1 through 10 {
    $x1: $x0 - calc(($x0 * $x0 - abs($r)) / (2 * $x0));
    $x0: $x1;
  }
  @return $x1;
}

//------------------------------------------------------------------------------------------
// Clamp Number: restrict between min and max values
//------------------------------------------------------------------------------------------

@function contains($list, $item) {
  @return index($list, $item) != null;
}

//------------------------------------------------------------------------------------------
// Convert angles
//------------------------------------------------------------------------------------------

@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 10grad/9deg 1turn/360deg 3.1415926rad/180deg;
  @if index($convertable-units, unit($value)) and
    index($convertable-units, $unit)
  {
    @return $value /
      nth($conversion-factors, index($convertable-units, unit($value))) *
      nth($conversion-factors, index($convertable-units, $unit));
  } @else {
    @warn "Cannot convert #{unit($value)} to #{$unit}";
  }
}

//------------------------------------------------------------------------------------------
// Is check functions
//------------------------------------------------------------------------------------------

@function is-map($var) {
  @return type-of($var) == "map";
}

@function is-number($value) {
  @return type-of($value) == 'number';
}
 
@function is-time($value) {
  @return is-number($value) and index('ms' 's', unit($value)) != null;
}
 
@function is-duration($value) {
  @return is-time($value);
}
 
@function is-angle($value) {
  @return is-number($value) and index('deg' 'rad' 'grad' 'turn', unit($value)) != null;
}
 
@function is-frequency($value) {
  @return is-number($value) and index('Hz' 'kHz', unit($value)) != null;
}
 
@function is-integer($value) {
  @return is-number($value) and round($value) == $value;
}
 
@function is-relative-length($value) {
  @return is-number($value) and index('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax', unit($value)) != null;
}
 
@function is-absolute-length($value) {
  @return is-number($value) and index('cm' 'mm' 'in' 'px' 'pt' 'pc', unit($value)) != null;
}
 
@function is-percentage($value) {
  @return is-number($value) and unit($value) == '%';
}
 
@function is-length($value) {
  @return is-relative-length($value) or is-absolute-length($value);
}
 
@function is-resolution($value) {
  @return is-number($value) and index('dpi' 'dpcm' 'dppx', unit($value)) != null;
}
 
@function is-position($value) {
  @return is-length($value) or is-percentage($value) or index('top' 'right' 'bottom' 'left' 'center', $value) != null;
}